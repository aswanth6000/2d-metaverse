// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// The core User model
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String? // Optional for social logins
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String

  // OAuth / Social Login support
  provider AuthProvider? // Tracks login method (e.g., LOCAL, GOOGLE)

  sessions           Session[]
  emailVerifications EmailVerification[]
  passwordResets     PasswordReset[]
  roles              UserRole[]
}

// Enum for different login providers
enum AuthProvider {
  LOCAL // for email/password
  GOOGLE
}

// Manages user login sessions and refresh tokens
model Session {
  id           String    @id @default(cuid())
  userId       String
  replacedById String? // For token rotation chain
  revokedAt    DateTime?
  createdAt    DateTime  @default(now())
  expiresAt    DateTime
  ip           String?
  userAgent    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

// For handling email confirmation flows
model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// For "forgot password" functionality
model PasswordReset {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  usedAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// --- Role-Based Access Control (RBAC) Models ---

model Role {
  id          String           @id @default(cuid())
  name        String           @unique // e.g., "admin", "manager", "user"
  createdAt   DateTime         @default(now())
  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id        String           @id @default(cuid())
  key       String           @unique // e.g., "invoice.read", "user.create"
  createdAt DateTime         @default(now())
  roles     RolePermission[]
}

// Join table for Roles and Permissions
model RolePermission {
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

// Join table for Users and Roles
model UserRole {
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}
