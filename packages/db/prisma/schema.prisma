// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// The core User model that was missing
model User {
  id                 String   @id @default(cuid())
  email              String   @unique
  passwordHash       String
  emailVerified      Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  sessions           Session[]
  emailVerifications EmailVerification[]
  passwordResets     PasswordReset[]
  roles              UserRole[]
}

// This was your first "User" model, now correctly named "Session"
model Session {
  id             String    @id @default(cuid())
  userId         String    // The missing foreign key field
  replacedById   String?   // For token rotation chain
  revokedAt      DateTime?
  createdAt      DateTime  @default(now())
  expiresAt      DateTime
  ip             String?
  userAgent      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PasswordReset {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  usedAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Your RBAC models below were well-structured and are kept as is.

model Role {
  id          String           @id @default(cuid())
  name        String           @unique // e.g., "admin", "manager", "user"
  createdAt   DateTime         @default(now())
  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id    String   @id @default(cuid())
  key   String   @unique // e.g., "invoice.read"
  createdAt DateTime @default(now())
  roles RolePermission[]
}

model RolePermission {
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model UserRole {
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}